from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
import math
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
import numpy as np
def MAPE(Y_actual, Y_Predicted):
 mape = np.mean(np.abs((Y_actual - Y_Predicted)/Y_actual))*100
 return mape
def decision_tree_regression(X_train, Y_train, X_test, Y_test, data_value):
 r_dt = DecisionTreeRegressor(random_state=(0))
 r_dt.fit(X_train, Y_train)
 Y_pred = r_dt.predict(X_test)
 print('Decision Tree Regression:')
 print(f'MSE: {mean_squared_error(Y_test, Y_pred)}')
 print(f'RMSE: {math.sqrt(mean_squared_error(Y_test, Y_pred))}')
 print(f'MAPE: {MAPE(Y_test, Y_pred)}')
 print(f'MAE: {mean_absolute_error(Y_test, Y_pred)}')
 plt.figure(figsize=(10, 7))
 plt.subplot(211)
 plt.plot(range(data_value), Y_test[0:data_value], 'bo', label="Actual Value")
 plt.plot(range(data_value), Y_pred[0:data_value], 'ro', label="Predict Value")
 plt.xlabel(f"First {data_value} Test Data")
 plt.ylabel("Name of Y Axis ")
 plt.title(f'Decision Tree Regression: Train Data = {len(Y_train)} Test Data = {len(Y_test)}')
 plt.legend()
 plt.subplot(212)
 plt.xlabel(f"First {data_value} Test Data")
 plt.ylabel("Name of Y Axis ")
 plt.plot(range(data_value), Y_test[0:data_value], 'b', label="Actual Value")
 plt.plot(range(data_value), Y_pred[0:data_value], 'r', label="Predict Value")
 plt.legend()
 plt.show()
def linear_regression(X_train, Y_train, X_test, Y_test, data_value):
 model = LinearRegression()
 model.fit(X_train, Y_train)
 Y_pred = model.predict(X_test)
 print('Linear Regression:')
 print(f'MSE: {mean_squared_error(Y_test, Y_pred)}')
 print(f'RMSE: {math.sqrt(mean_squared_error(Y_test, Y_pred))}')
 print(f'MAPE: {MAPE(Y_test.values, Y_pred)}')
 print(f'MAE: {mean_absolute_error(Y_test, Y_pred)}')
 plt.figure(figsize=(10, 7))
 plt.subplot(211)
 plt.plot(range(data_value), Y_test[0:data_value], 'bo', label="Actual Value")
 plt.plot(range(data_value), Y_pred[0:data_value], 'ro', label="Predict Value")
 plt.xlabel(f"First {data_value} Test Data")
 plt.ylabel("Name of Y Axis ")
 plt.title(f'Linear Regression: Train Data = {len(Y_train)} Test Data = {len(Y_test)}')
 plt.legend()
 plt.subplot(212)
 plt.xlabel(f"First {data_value} Test Data")
 plt.ylabel("Name of Y Axis ")
 plt.plot(range(data_value), Y_test[0:data_value], 'b', label="Actual Value")
 plt.plot(range(data_value), Y_pred[0:data_value], 'r', label="Predict Value")
 plt.legend()
 plt.show()
def xgboost_regression(X_train, Y_train, X_test, Y_test, data_value):
 model = XGBRegressor()
 model.fit(X_train, Y_train)
 Y_pred = model.predict(X_test)
 print('XGBoost Regression:')
 print(f'MSE: {mean_squared_error(Y_test, Y_pred)}')
 print(f'RMSE: {math.sqrt(mean_squared_error(Y_test, Y_pred))}')
 print(f'MAPE: {MAPE(Y_test, Y_pred)}')
 print(f'MAE: {mean_absolute_error(Y_test, Y_pred)}')
 plt.figure(figsize=(10, 7))
 plt.subplot(211)
 plt.xlabel(f"First {data_value} Test Data")
 plt.ylabel("Name of Y Axis ")
 plt.plot(range(data_value), Y_test[0:data_value], 'bo', label="Actual Value")
 plt.plot(range(data_value), Y_pred[0:data_value], 'ro', label="Predict Value")
 plt.title(f'XGBoost: Train Data = {len(Y_train)} Test Data = {len(Y_test)}')
 plt.legend()
 plt.subplot(212)
 plt.xlabel(f"First {data_value} Test Data")
 plt.ylabel("Name of Y Axis")
 plt.plot(range(data_value), Y_test[0:data_value], 'b', label="Actual Value")
 plt.plot(range(data_value), Y_pred[0:data_value], 'r', label="Predict Value")
 plt.legend()
 plt.show()

